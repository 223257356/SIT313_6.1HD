{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAJo1-dgtdn-ZEiPXvj62BNK604j8Am-TU\",\n  authDomain: \"deakin-web-app-566d6.firebaseapp.com\",\n  projectId: \"deakin-web-app-566d6\",\n  storageBucket: \"deakin-web-app-566d6.appspot.com\",\n  messagingSenderId: \"825272061851\",\n  appId: \"1:825272061851:web:2433d4d902505bf691db3e\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocFromAuth = async (userAuth, additionalInformation = {}) => {\n  if (!userAuth.email) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('Error in creating ,' + error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocFromAuth","userAuth","additionalInformation","email","userDocRef","uid","userSnapshot","exists","displayName","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/jessicawong/Projects/SIT313_4.1P/devdeakin/src/utilities/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAJo1-dgtdn-ZEiPXvj62BNK604j8Am-TU\",\n  authDomain: \"deakin-web-app-566d6.firebaseapp.com\",\n  projectId: \"deakin-web-app-566d6\",\n  storageBucket: \"deakin-web-app-566d6.appspot.com\",\n  messagingSenderId: \"825272061851\",\n  appId: \"1:825272061851:web:2433d4d902505bf691db3e\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters (\n    {\n        prompt:\"select_account\"\n    }\n);\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\n\nexport const createUserDocFromAuth = async(userAuth, additionalInformation = {}) => {\n    if (!userAuth.email) return;\n    const userDocRef = doc (db, 'users', userAuth.uid);\n\n    const userSnapshot = await getDoc(userDocRef);\n\n    if (!userSnapshot.exists()) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalInformation\n            })\n        }\n\n        catch (error){\n            console.log('Error in creating ,' + error.message);\n        }\n\n    }\n    return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return;\n    return await createUserWithEmailAndPassword(auth, email, password)\n}\n\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,8BAA8B,QAAQ,eAAe;AAC5G,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAGtE;AACA;;AAEA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,sCAAsC;EAClDC,SAAS,EAAE,sBAAsB;EACjCC,aAAa,EAAE,kCAAkC;EACjDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACAf,aAAa,CAACS,cAAc,CAAC;AAE7B,MAAMO,QAAQ,GAAG,IAAIb,kBAAkB,CAAC,CAAC;AACzCa,QAAQ,CAACC,mBAAmB,CACxB;EACIC,MAAM,EAAC;AACX,CACJ,CAAC;AAED,OAAO,MAAMC,IAAI,GAAGlB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMmB,qBAAqB,GAAGA,CAAA,KAAMlB,eAAe,CAACiB,IAAI,EAAEH,QAAQ,CAAC;AAC1E,OAAO,MAAMK,EAAE,GAAGhB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMiB,qBAAqB,GAAG,MAAAA,CAAMC,QAAQ,EAAEC,qBAAqB,GAAG,CAAC,CAAC,KAAK;EAChF,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;EACrB,MAAMC,UAAU,GAAGpB,GAAG,CAAEe,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACI,GAAG,CAAC;EAElD,MAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACmB,UAAU,CAAC;EAE7C,IAAI,CAACE,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IACxB,MAAM;MAAEC,WAAW;MAAEL;IAAM,CAAC,GAAGF,QAAQ;IACvC,MAAMQ,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAI;MACA,MAAMxB,MAAM,CAACkB,UAAU,EAAE;QACrBI,WAAW;QACXL,KAAK;QACLM,SAAS;QACT,GAAGP;MACP,CAAC,CAAC;IACN,CAAC,CAED,OAAOS,KAAK,EAAC;MACTC,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGF,KAAK,CAACG,OAAO,CAAC;IACtD;EAEJ;EACA,OAAOV,UAAU;AACrB,CAAC;AAED,OAAO,MAAMW,kCAAkC,GAAG,MAAAA,CAAOZ,KAAK,EAAEa,QAAQ,KAAK;EACzE,IAAI,CAACb,KAAK,IAAI,CAACa,QAAQ,EAAE;EACzB,OAAO,MAAMlC,8BAA8B,CAACe,IAAI,EAAEM,KAAK,EAAEa,QAAQ,CAAC;AACtE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}